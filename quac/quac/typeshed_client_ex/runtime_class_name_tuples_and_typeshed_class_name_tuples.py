# Used for handling mismatches between runtime class names and Typeshed class names.

import collections.abc

none_type: type = type(None)
ellipsis_type: type = type(Ellipsis)
dict_keys_type: type = {}.keys().__class__
dict_values_type: type = {}.values().__class__
dict_items_type: type = {}.items().__class__


runtime_class_name_tuple_to_typeshed_class_name_tuple: dict[tuple[str, str], tuple[str, str]] = {
    ('builtins', 'function'): ('types', 'FunctionType'),
    ('builtins', 'code'): ('types', 'CodeType'),
    ('builtins', 'mappingproxy'): ('types', 'MappingProxyType'),
    ('builtins', 'cell'): ('types', 'CellType'),
    ('builtins', 'generator'): ('types', 'GeneratorType'),
    ('builtins', 'coroutine'): ('types', 'CoroutineType'),
    ('builtins', 'async_generator'): ('types', 'AsyncGeneratorType'),
    ('builtins', 'method'): ('types', 'MethodType'),
    ('builtins', 'builtin_function_or_method'): ('types', 'BuiltinFunctionType'),
    ('builtins', 'wrapper_descriptor'): ('types', 'WrapperDescriptorType'),
    ('builtins', 'method-wrapper'): ('types', 'MethodWrapperType'),
    ('builtins', 'method_descriptor'): ('types', 'MethodDescriptorType'),
    ('builtins', 'classmethod_descriptor'): ('types', 'ClassMethodDescriptorType'),
    ('builtins', 'module'): ('types', 'ModuleType'),
    ('builtins', 'traceback'): ('types', 'TracebackType'),
    ('builtins', 'frame'): ('types', 'FrameType'),
    ('builtins', 'getset_descriptor'): ('types', 'GetSetDescriptorType'),
    ('builtins', 'member_descriptor'): ('types', 'MemberDescriptorType'),
    ('builtins', 'ellipsis'): ('builtins', 'ellipsis'),
    ('builtins', 'NoneType'): ('types', 'NoneType'),
    ('builtins', 'NotImplementedType'): ('types', 'NotImplementedType'),
    ('builtins', 'dict_keys'): ('_collections_abc', 'dict_keys'),
    ('builtins', 'dict_values'): ('_collections_abc', 'dict_values'),
    ('builtins', 'dict_items'): ('_collections_abc', 'dict_items'),
    ('collections.abc', 'Awaitable'): ('typing', 'Awaitable'),
    ('collections.abc', 'Coroutine'): ('typing', 'Coroutine'),
    ('collections.abc', 'AsyncIterable'): ('typing', 'AsyncIterable'),
    ('collections.abc', 'AsyncIterator'): ('typing', 'AsyncIterator'),
    ('collections.abc', 'AsyncGenerator'): ('typing', 'AsyncGenerator'),
    ('collections.abc', 'Hashable'): ('typing', 'Hashable'),
    ('collections.abc', 'Iterable'): ('typing', 'Iterable'),
    ('collections.abc', 'Iterator'): ('typing', 'Iterator'),
    ('collections.abc', 'Generator'): ('typing', 'Generator'),
    ('collections.abc', 'Reversible'): ('typing', 'Reversible'),
    ('collections.abc', 'Sized'): ('typing', 'Sized'),
    ('collections.abc', 'Container'): ('typing', 'Container'),
    ('collections.abc', 'Callable'): ('typing', 'Callable'),
    ('collections.abc', 'Collection'): ('typing', 'Collection'),
    ('collections.abc', 'Set'): ('typing', 'AbstractSet'),
    ('collections.abc', 'MutableSet'): ('typing', 'MutableSet'),
    ('collections.abc', 'Mapping'): ('typing', 'Mapping'),
    ('collections.abc', 'MutableMapping'): ('typing', 'MutableMapping'),
    ('collections.abc', 'MappingView'): ('typing', 'MappingView'),
    ('collections.abc', 'KeysView'): ('typing', 'KeysView'),
    ('collections.abc', 'ItemsView'): ('typing', 'ItemsView'),
    ('collections.abc', 'ValuesView'): ('typing', 'ValuesView'),
    ('collections.abc', 'Sequence'): ('typing', 'Sequence'),
    ('collections.abc', 'MutableSequence'): ('typing', 'MutableSequence'),
    ('collections.abc', 'ByteString'): ('typing', 'ByteString'),
    ('_io', 'BufferedRWPair'): ('io', 'BufferedRWPair'),
    ('_io', 'BufferedRandom'): ('io', 'BufferedRandom'),
    ('_io', 'BufferedReader'): ('io', 'BufferedReader'),
    ('_io', 'BufferedWriter'): ('io', 'BufferedWriter'),
    ('_io', 'BytesIO'): ('io', 'BytesIO'),
    ('_io', 'FileIO'): ('io', 'FileIO'),
    ('_io', 'IncrementalNewlineDecoder'): ('io', 'IncrementalNewlineDecoder'),
    ('_io', 'StringIO'): ('io', 'StringIO'),
    ('_io', 'TextIOWrapper'): ('io', 'TextIOWrapper'),
}

typeshed_class_name_tuple_to_runtime_class: dict[tuple[str, str], type] = {
    ('_collections_abc', 'dict_keys'): dict_keys_type,
    ('_collections_abc', 'dict_values'): dict_values_type,
    ('_collections_abc', 'dict_items'): dict_items_type,
    ('builtins', 'ellipsis'): ellipsis_type,
    ('types', 'NoneType'): none_type,
    ('typing', 'Awaitable'): collections.abc.Awaitable,
    ('typing', 'Coroutine'): collections.abc.Coroutine,
    ('typing', 'AsyncIterable'): collections.abc.AsyncIterable,
    ('typing', 'AsyncIterator'): collections.abc.AsyncIterator,
    ('typing', 'AsyncGenerator'): collections.abc.AsyncGenerator,
    ('typing', 'Hashable'): collections.abc.Hashable,
    ('typing', 'Iterable'): collections.abc.Iterable,
    ('typing', 'Iterator'): collections.abc.Iterator,
    ('typing', 'Generator'): collections.abc.Generator,
    ('typing', 'Reversible'): collections.abc.Reversible,
    ('typing', 'Sized'): collections.abc.Sized,
    ('typing', 'Container'): collections.abc.Container,
    ('typing', 'Callable'): collections.abc.Callable,
    ('typing', 'Collection'): collections.abc.Collection,
    ('typing', 'AbstractSet'): collections.abc.Set,
    ('typing', 'MutableSet'): collections.abc.MutableSet,
    ('typing', 'Mapping'): collections.abc.Mapping,
    ('typing', 'MutableMapping'): collections.abc.MutableMapping,
    ('typing', 'MappingView'): collections.abc.MappingView,
    ('typing', 'KeysView'): collections.abc.KeysView,
    ('typing', 'ItemsView'): collections.abc.ItemsView,
    ('typing', 'ValuesView'): collections.abc.ValuesView,
    ('typing', 'Sequence'): collections.abc.Sequence,
    ('typing', 'MutableSequence'): collections.abc.MutableSequence,
    ('typing', 'ByteString'): collections.abc.ByteString
}
